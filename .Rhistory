usethis::use_r("eq_map")
usethis::use_test("eq_map")
usethis::use_roxygen_md()
usethis::use_mit_license("Hugo Nomanyon")
usethis::use_package("dplyr")
usethis::use_package("magrittr")
usethis::use_package("leaflet")
devtools::load_all(".")
q()
usethis::use_github()
usethis::use_readme_rmd()
devtools::load_all(".")
usethis::use_travis()
usethis::use_github_actions()
devtools::load_all(".")
usethis::use_r("eq_map")
usethis::use_test("eq_map")
devtools::load_all(".")
my_df = data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35,
`Location Name` = paste(
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"), sep = ":"),
Mag = 3, Deaths = 0,
check.names = FALSE
)
my_loc_clean_df = data.frame(
Mag = my_df$Mag, Deaths = my_df$Deaths,
DATE = as.Date(
paste(my_df$Year, my_df$Mo, my_df$Dy, sep = "-")),
LONGITUDE = my_df$Longitude,
LATITUDE = my_df$Latitude,
COUNTRY = c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
LOCATION_NAME = c("Aaaa", "Bbbb", "Cccc", "Dddd", "Eeee"),
check.names = FALSE
)
devtools::load_all(".")
eq_map(my_loc_clean_df)
eq_map(my_loc_clean_df, annot_col = "DATE")
devtools::load_all(".")
my_df
my_loc_clean_df
eq_map(my_loc_clean_df)
eq_map(my_loc_clean_df, annot_col = "DATE")
usethis::use_package("leaflet")
devtools::load_all(".")
eq_map(my_loc_clean_df, annot_col = "DATE")
library(noaar)
my_df = data.frame(
Year = 2001:2005, Mo = 1:5, Dy = 11:15,
Longitude = 21:25, Latitude = 31:35,
`Location Name` = paste(
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"), sep = ":"),
Mag = 3, Deaths = 0,
check.names = FALSE
)
my_loc_clean_df = data.frame(
Mag = my_df$Mag, Deaths = my_df$Deaths,
DATE = as.Date(
paste(my_df$Year, my_df$Mo, my_df$Dy, sep = "-")),
LONGITUDE = my_df$Longitude,
LATITUDE = my_df$Latitude,
COUNTRY = c("AAAA", "BBBB", "CCCC", "DDDD", "EEEE"),
LOCATION_NAME = c("Aaaa", "Bbbb", "Cccc", "Dddd", "Eeee"),
check.names = FALSE
)
eq_map(my_loc_clean_df, annot_col = "DATE")
remove.packages("leaflet")
remove.packages("terra")
remove.packages("raster")
remove.packages("sp")
remove.packages("sf")
remove.packages("sfed")
q()
library(remotes)
package_deps("devtools")
remove.packages("devtools")
remove.packages("dplyr")
remove.packages("usethis")
package_deps("devtools")
update(package_deps("devtools"))
remotes::dev_package_deps(dependencies = "devtools")
package_deps("devtools")
package_deps("leaflet")
addons:
apt:
packages:
- libgdal-dev
package_deps("libgdal-dev")
package_deps("ggplot2")
update_packages(package_deps("ggplot2"))
package_deps("remotes")
q()
package_deps("ggplot2")
library(remotes)
package_deps("ggplot2")
update(package_deps("ggplot2"))
package_deps("dplyr")
update(package_deps("dplyr"))
package_deps("magrittr")
package_deps("stringr")
package_deps("purrr")
package_deps("remotes")
package_deps("devtools")
update(package_deps("devtools"))
q()
package_deps("devtools")
library(remotes)
package_deps("devtools")
update(package_deps("devtools"))
package_deps("lubridate")
package_deps("htmltools")
package_deps("rmarkdown")
package_deps("knitr")
package_deps("tydiverse")
package_deps("grid")
package_deps("tydiverse")
update(package_deps("tydiverse"))
package_deps("libgdal")
package_deps("libgdal-dev")
update(package_deps("libgdal-dev"))
package_deps("libproj-dev")
package_deps("libudunits2-dev")
package_deps("libgeos-dev")
package_deps("netcdf-bin")
sudo apt-get update
package_deps("GDAL")
package_deps("GEOS")
package_deps("GEOSbasfsgh")
remotes::install_deps(dependencies = TRUE)
package_deps("terra")
package_deps("raster")
package_deps("sf")
update(package_deps("sf"))
package_deps("sp")
package_deps("leaflet")
remotes::install_deps(dependencies = TRUE)
q()
usethis::use_package("dplyr")
usethis::use_package("leaflet")
devtools::load_all(".")
usethis::use_package("magrittr")
devtools::load_all(".")
?grid::unit
library(grid)
unit(1, "npc")
unit(4, "npc")
unit(1:3/4, "npc")
unit(1:3/4, "npc") + unit(1, "npc")
unit(1:3/4, "npc") + unit(1, "inches")
unit(1, "npc") + unit(1, "inches")
1:3/4
1:3
10:5
1:5/4
myLine <- linesGrob()
plot(myLine)
myLine <- segmentsGrob()
plot(myLine)
myLine <- segmentsGrob(0,0,1,1)
plot(myLine)
segments(0,0,1,1)
?polylineGrob
grid.lines()
linesGrob()
grid.lines(draw = FALSE)
grid.lines(linesGrob())
polylineGrob(1:5, 1:5) %>% grid.lines()
polylineGrob(unit(1:5, "npc"), unit(1:5, "npc")) %>% grid.lines()
polylineGrob(unit(1:5, "npc"), unit(1:5, "npc")) %>% plot()
polylineGrob(unit(1:5, "npc"), unit(1:5, "npc")) %>% grid.draw()
polylineGrob(unit(1:5, "npc"), unit(1:5, "npc")) %>% grid.draw
grid.polyline(unit(1:5, "npc"), unit(1:5, "npc"))
grid.polyline(unit(1:5, "npc"), unit(1:5, "npc"), id = 1)
grid.polyline(unit(1:5, "npc"), unit(1:5, "npc"), id = rep(1, 5))
grid.lines(unit(1:5, "npc"), unit(1:5, "npc"), id = rep(1, 5))
grid.lines(unit(1:5, "npc"), unit(1:5, "npc"))
unit(1:4, "npc")
grid.lines(unit(1:5, "npc"), unit(1:5, "npc"))
grid.lines(unit(1:5, "npc"), unit(1:5, "npc"), id = rep(1, 5))
grid.polyline(unit(1:5, "npc"), unit(1:5, "npc"), id = 1)
grid.polyline(unit(1:5, "npc"), unit(1:5, "npc"))
